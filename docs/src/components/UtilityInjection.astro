---
let { extras, except, set, version } = Astro.props;

extras = (extras ?? '').split('||').filter((extra) => extra !== '').map((extra) => {
    const [name, type, parameter, description] = extra.split(';;')

    return { name, type, parameter, description }
})

let utilities = [
    ...extras,
    ...{
        '4.x': {
            actions: [
                {
                    name: 'Action',
                    type: 'Filament\\Actions\\Action',
                    parameter: '$action',
                    description: 'The current action instance.',
                },
                {
                    name: 'Arguments',
                    type: 'array<string, mixed>',
                    parameter: '$arguments',
                    description: 'The array of arguments passed to the action when it was triggered.',
                },
                {
                    name: 'Data',
                    type: 'array<string, mixed>',
                    parameter: '$data',
                    description: 'The array of data submitted from form fields in the action\'s modal. It will be empty before the modal form is submitted.',
                },
                {
                    name: 'Livewire',
                    type: 'Livewire\\Component',
                    parameter: '$livewire',
                    description: 'The Livewire component instance.',
                },
                {
                    name: 'Eloquent model FQN',
                    type: '?string<Illuminate\\Database\\Eloquent\\Model>',
                    parameter: '$model',
                    description: 'The Eloquent model FQN for the current action, if one is attached.',
                },
                {
                    name: 'Eloquent record',
                    type: '?Illuminate\\Database\\Eloquent\\Model',
                    parameter: '$record',
                    description: 'The Eloquent record for the current action, if one is attached.',
                },
                {
                    name: 'Selected Eloquent records',
                    type: 'Illuminate\\Support\\Collection',
                    parameter: '$selectedRecords',
                    description: '[Bulk actions only] The Eloquent records selected in the table.',
                },
                {
                    name: 'Mounted actions',
                    type: 'array<Filament\\Actions\\Action>',
                    parameter: '$mountedActions',
                    description: 'The array of actions that are currently mounted in the Livewire component. This is useful for accessing data from parent actions.',
                },
                {
                    name: 'Schema',
                    type: 'Filament\\Schemas\\Schema',
                    parameter: '$schema',
                    description: '[Actions in schemas only] The schema object that this action belongs to.',
                },
                {
                    name: 'Schema component',
                    type: 'Filament\\Schemas\\Components\\Component',
                    parameter: '$schemaComponent',
                    description: '[Actions in schemas only] The schema component that this action belongs to.',
                },
                {
                    name: 'Schema get function',
                    type: 'Filament\\Schemas\\Components\\Utilities\\Get',
                    parameter: '$schemaGet',
                    description: '[Actions in schemas only] A function for retrieving values from the schema data. Validation is not run on form fields.',
                },
                {
                    name: 'Schema set function',
                    type: 'Filament\\Schemas\\Components\\Utilities\\Set',
                    parameter: '$schemaSet',
                    description: '[Actions in schemas only] A function for setting values in the schema data.',
                },
                {
                    name: 'Schema component state',
                    type: 'mixed',
                    parameter: '$schemaComponentState',
                    description: '[Actions in schemas only] The current value of the schema component.',
                },
                {
                    name: 'Schema operation',
                    type: 'string',
                    parameter: '$schemaOperation',
                    description: '[Actions in schemas only] The current operation being performed by the schema. Usually <code>create</code>, <code>edit</code>, or <code>view</code>.',
                },
                {
                    name: 'Table',
                    type: 'Filament\\Tables\\Table',
                    parameter: '$table',
                    description: '[Actions in tables only] The table object that this action belongs to.',
                },
            ],
            actionGroups: [
                {
                    name: 'Action group',
                    type: 'Filament\\Actions\\ActionGroup',
                    parameter: '$group',
                    description: 'The current action group instance.',
                },
                {
                    name: 'Livewire',
                    type: 'Livewire\\Component',
                    parameter: '$livewire',
                    description: 'The Livewire component instance.',
                },
                {
                    name: 'Eloquent model FQN',
                    type: '?string<Illuminate\\Database\\Eloquent\\Model>',
                    parameter: '$model',
                    description: 'The Eloquent model FQN for the current action group, if one is attached.',
                },
                {
                    name: 'Eloquent record',
                    type: '?Illuminate\\Database\\Eloquent\\Model',
                    parameter: '$record',
                    description: 'The Eloquent record for the current action group, if one is attached.',
                },
                {
                    name: 'Mounted actions',
                    type: 'array<Filament\\Actions\\Action>',
                    parameter: '$mountedActions',
                    description: 'The array of actions that are currently mounted in the Livewire component. This is useful for accessing data from parent actions.',
                },
                {
                    name: 'Schema',
                    type: 'Filament\\Schemas\\Schema',
                    parameter: '$schema',
                    description: '[Action groups in schemas only] The schema object that this action group belongs to.',
                },
                {
                    name: 'Schema component',
                    type: 'Filament\\Schemas\\Components\\Component',
                    parameter: '$schemaComponent',
                    description: '[Action groups in schemas only] The schema component that this action group belongs to.',
                },
                {
                    name: 'Schema get function',
                    type: 'Filament\\Schemas\\Components\\Utilities\\Get',
                    parameter: '$schemaGet',
                    description: '[Action groups in schemas only] A function for retrieving values from the schema data. Validation is not run on form fields.',
                },
                {
                    name: 'Schema component state',
                    type: 'mixed',
                    parameter: '$schemaComponentState',
                    description: '[Action groups in schemas only] The current value of the schema component.',
                },
                {
                    name: 'Schema operation',
                    type: 'string',
                    parameter: '$schemaOperation',
                    description: '[Action groups in schemas only] The current operation being performed by the schema. Usually <code>create</code>, <code>edit</code>, or <code>view</code>.',
                },
                {
                    name: 'Table',
                    type: 'Filament\\Tables\\Table',
                    parameter: '$table',
                    description: '[Action groups in tables only] The table object that this action group belongs to.',
                },
            ],
            formFields: [
                {
                    name: 'Field',
                    type: 'Filament\\Forms\\Components\\Field',
                    parameter: '$component',
                    description: 'The current field component instance.',
                },
                {
                    name: 'Get function',
                    type: 'Filament\\Schemas\\Components\\Utilities\\Get',
                    parameter: '$get',
                    description: 'A function for retrieving values from the current form data. Validation is not run.',
                },
                {
                    name: 'Eloquent model FQN',
                    type: '?string<Illuminate\\Database\\Eloquent\\Model>',
                    parameter: '$model',
                    description: 'The Eloquent model FQN for the current schema.',
                },
                {
                    name: 'Livewire',
                    type: 'Livewire\\Component',
                    parameter: '$livewire',
                    description: 'The Livewire component instance.',
                },
                {
                    name: 'Raw state',
                    type: 'mixed',
                    parameter: '$rawState',
                    description: 'The current value of the field, before state casts were applied. Validation is not run.',
                },
                {
                    name: 'State',
                    type: 'mixed',
                    parameter: '$state',
                    description: 'The current value of the field. Validation is not run.',
                },
                {
                    name: 'Operation',
                    type: 'string',
                    parameter: '$operation',
                    description: 'The current operation being performed by the schema. Usually <code>create</code>, <code>edit</code>, or <code>view</code>.',
                },
                {
                    name: 'Eloquent record',
                    type: '?Illuminate\\Database\\Eloquent\\Model',
                    parameter: '$record',
                    description: 'The Eloquent record for the current schema.',
                },
            ],
            exportColumns: [
                {
                    name: 'Export column',
                    type: 'Filament\\Actions\\Exports\\ExportColumn',
                    parameter: '$column',
                    description: 'The current export column instance.',
                },
                {
                    name: 'Exporter',
                    type: '?Filament\\Actions\\Exports\\Exporter',
                    parameter: '$exporter',
                    description: 'The instance of the exporter class that is currently being used for exporting data.',
                },
                {
                    name: 'Options',
                    type: 'array<string, mixed>',
                    parameter: '$options',
                    description: 'The options that were defined when the export started.',
                },
                {
                    name: 'Eloquent record',
                    type: '?Illuminate\\Database\\Eloquent\\Model',
                    parameter: '$record',
                    description: 'The Eloquent record that is currently being exported.',
                },
            ],
            importColumns: [
                {
                    name: 'Import column',
                    type: 'Filament\\Actions\\Imports\\ImportColumn',
                    parameter: '$column',
                    description: 'The current import column instance.',
                },
                {
                    name: 'Data',
                    type: 'array<string, mixed>',
                    parameter: '$data',
                    description: 'The processed data for the record that is currently being imported.',
                },
                {
                    name: 'Importer',
                    type: '?Filament\\Actions\\Imports\\Importer',
                    parameter: '$importer',
                    description: 'The instance of the importer class that is currently being used for importing data.',
                },
                {
                    name: 'Options',
                    type: 'array<string, mixed>',
                    parameter: '$options',
                    description: 'The options that were defined when the import started.',
                },
                {
                    name: 'Original data',
                    type: 'array<string, mixed>',
                    parameter: '$originalData',
                    description: 'The original data for the record that is currently being imported, before it was processed.',
                },
                {
                    name: 'Eloquent record',
                    type: '?Illuminate\\Database\\Eloquent\\Model',
                    parameter: '$record',
                    description: 'The Eloquent record that is currently being imported.',
                },
            ],
            infolistEntries: [
                {
                    name: 'Entry',
                    type: 'Filament\\Infolists\\Components\\Entry',
                    parameter: '$component',
                    description: 'The current entry component instance.',
                },
                {
                    name: 'Get function',
                    type: 'Filament\\Schemas\\Components\\Utilities\\Get',
                    parameter: '$get',
                    description: 'A function for retrieving values from the current schema data. Validation is not run on form fields.',
                },
                {
                    name: 'Eloquent model FQN',
                    type: '?string<Illuminate\\Database\\Eloquent\\Model>',
                    parameter: '$model',
                    description: 'The Eloquent model FQN for the current schema.',
                },
                {
                    name: 'Livewire',
                    type: 'Livewire\\Component',
                    parameter: '$livewire',
                    description: 'The Livewire component instance.',
                },
                {
                    name: 'State',
                    type: 'mixed',
                    parameter: '$state',
                    description: 'The current value of the entry.',
                },
                {
                    name: 'Operation',
                    type: 'string',
                    parameter: '$operation',
                    description: 'The current operation being performed by the schema. Usually <code>create</code>, <code>edit</code>, or <code>view</code>.',
                },
                {
                    name: 'Eloquent record',
                    type: '?Illuminate\\Database\\Eloquent\\Model',
                    parameter: '$record',
                    description: 'The Eloquent record for the current schema.',
                },
            ],
            schemaComponents: [
                {
                    name: 'Component',
                    type: 'Filament\\Schemas\\Components\\Component',
                    parameter: '$component',
                    description: 'The current component instance.',
                },
                {
                    name: 'Get function',
                    type: 'Filament\\Schemas\\Components\\Utilities\\Get',
                    parameter: '$get',
                    description: 'A function for retrieving values from the current schema data. Validation is not run on form fields.',
                },
                {
                    name: 'Eloquent model FQN',
                    type: '?string<Illuminate\\Database\\Eloquent\\Model>',
                    parameter: '$model',
                    description: 'The Eloquent model FQN for the current schema.',
                },
                {
                    name: 'Livewire',
                    type: 'Livewire\\Component',
                    parameter: '$livewire',
                    description: 'The Livewire component instance.',
                },
                {
                    name: 'Operation',
                    type: 'string',
                    parameter: '$operation',
                    description: 'The current operation being performed by the schema. Usually <code>create</code>, <code>edit</code>, or <code>view</code>.',
                },
                {
                    name: 'Eloquent record',
                    type: '?Illuminate\\Database\\Eloquent\\Model',
                    parameter: '$record',
                    description: 'The Eloquent record for the current schema.',
                },
            ],
            tableColumns: [
                {
                    name: 'Column',
                    type: 'Filament\\Tables\\Columns\\Column',
                    parameter: '$column',
                    description: 'The current column instance.',
                },
                {
                    name: 'Livewire',
                    type: 'Livewire\\Component',
                    parameter: '$livewire',
                    description: 'The Livewire component instance.',
                },
                {
                    name: 'Row loop',
                    type: 'stdClass',
                    parameter: '$rowLoop',
                    description: 'The <a href="https://laravel.com/docs/blade#the-loop-variable" target="_blank">row loop</a> object for the current table row.',
                },
                {
                    name: 'State',
                    type: 'mixed',
                    parameter: '$state',
                    description: 'The current value of the column, based on the current table row.',
                },
                {
                    name: 'Eloquent record',
                    type: '?Illuminate\\Database\\Eloquent\\Model',
                    parameter: '$record',
                    description: 'The Eloquent record for the current table row.',
                },
                {
                    name: 'Table',
                    type: 'Filament\\Tables\\Table',
                    parameter: '$table',
                    description: 'The current table instance.',
                },
            ],
            tableFilters: [
                {
                    name: 'Filter',
                    type: 'Filament\\Tables\\Filters\\BaseFilter',
                    parameter: '$filter',
                    description: 'The current filter instance.',
                },
                {
                    name: 'Livewire',
                    type: 'Livewire\\Component',
                    parameter: '$livewire',
                    description: 'The Livewire component instance.',
                },
                {
                    name: 'Table',
                    type: 'Filament\\Tables\\Table',
                    parameter: '$table',
                    description: 'The current table instance.',
                },
            ],
        },
    }[version][set],
].sort((a, b) => a.parameter > b.parameter ? 1 : -1)

// Remove duplicate utilities with the same parameter and preserve the last utility, allowing for overrides.
utilities = Array.from(new Map(utilities.map((utility) => [utility.parameter, utility])).values())

// Remove utilities that are in the except list.
utilities = utilities.filter((utility) => !(except ?? '').split('||').includes(utility.parameter))

const link = {
    actions: `/docs/${version}/actions/overview#action-utility-injection`,
    actionGroups: `/docs/${version}/actions/overview#action-utility-injection`,
    formFields: `/docs/${version}/forms/overview#field-utility-injection`,
    infolistEntries: `/docs/${version}/infolists/overview#entry-utility-injection`,
    schemaComponents: `/docs/${version}/schemas/overview#component-utility-injection`,
    tableColumns: `/docs/${version}/tables/columns/overview#column-utility-injection`,
    tableFilters: `/docs/${version}/tables/filters/overview#filter-utility-injection`,
}[set] ?? null
---

<details class="rounded-lg mb-6 bg-[#ffede0] dark:bg-[#100f1b] border-2 border-[#ffd6b6] dark:border-[#282732] px-4 py-2">
    <summary class="font-medium">
        <slot />
    </summary>

    {link && <a href={link} target="_blank" class="mt-3">
        Learn more about utility injection.
    </a>}

    <table class="block overflow-x-auto whitespace-nowrap mt-3 mb-0">
        <thead>
            <tr class="border-b-2 border-[#ffd6b6] dark:border-[#282732]">
                <th class="py-2 ps-2 pe-4 sticky start-0 z-2 bg-[#ffede0] dark:bg-[#100f1b] after:content-['_'] after:bg-[#ffd6b6] dark:after:bg-[#282732] after:w-[2px] after:h-full after:absolute after:end-0 after:-my-2">Utility</th>
                <th class="p-2">Type</th>
                <th class="p-2">Parameter</th>
                <th class="p-2">Description</th>
            </tr>
        </thead>

        <tbody>
            {utilities.map((utility) => <tr class="border-[#ffd6b6] dark:border-[#282732]">
                <th class="py-2 ps-2 pe-4 sticky start-0 z-1 bg-[#ffede0] dark:bg-[#100f1b] after:content-['_'] after:bg-[#ffd6b6] dark:after:bg-[#282732] after:w-[2px] after:h-full after:absolute after:end-0 after:-my-2">{utility.name}</th>
                <td class="p-2"><code>{utility.type}</code></td>
                <td class="p-2"><code>{utility.parameter}</code></td>
                <td class="p-2" set:html={utility.description}></td>
            </tr>)}
        </tbody>
    </table>
</details>
